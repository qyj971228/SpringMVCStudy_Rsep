SpringMVC的数据响应方式 详见com.qyj.controller.UserController
    1.页面跳转
        1.返回字符串形式
            *1.直接返回字符串
                *此方法会将返回的字符串与视图解析器的前后缀拼接后跳转

                <!--配置内部资源视图解析器-->
                <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="prefix" value="/jsp/"/>
                    <property name="suffix" value=".jsp"/>
                </bean>
                    *prefix 前缀
                    *suffix 后缀

                @RequestMapping(value="/quick")
                public String save(){
                    return "success";
                }
                    *返回/jsp/success.jsp

            *2.返回带有前缀的字符串
                @RequestMapping(value="/quick")
                    public String save(){
                        return "forward:/jsp/success.jsp";
                    }
                *用于指定重定向还是转发
                转发:forward:/jsp/success.jsp
                重定向:redirect:/jsp/success.jsp -> 改变网址

        2.通过ModelAndView对象返回
            1.返回形式1,不带参数
                *Model:模型 封装数据
                *View: 视图 展示数据
                @RequestMapping(value="/quick2")
                public ModelAndView save2(){
                    ModelAndView modelAndView = new ModelAndView();
                    modelAndView.addObject("username","jack");//设置视图
                    modelAndView.setViewName("success");
                    return modelAndView;
                }

                ${requestScope.name}

            2.返回形式2,带一个ModelAndView对象作为参数
                *modelAndView -> spring生成的对象
                @RequestMapping(value="/quick3")
                public ModelAndView save3(ModelAndView modelAndView){
                    modelAndView.addObject("name","jack");
                    modelAndView.setViewName("success");
                    return modelAndView;
                }

            *3.返回形式3,带一个Model对象作为参数
                *model -> spring生成的对象
                @RequestMapping(value="/quick4")
                public String save4(Model model){
                    model.addAttribute("name","jack");
                    return "success";
                }

    2.回写数据
        1.直接返回字符串
            1.通过springmvc框架注入的response对象,使用response.getWriter().print("")回写数据,此时不需要试图跳转,业务方法返回值为void
                1.response.getWriter().print("")
                    @RequestMapping(value="/quick6")
                    public void save6(HttpServletResponse response) throws IOException {
                        // response.getWriter().write("write");
                        response.getWriter().print("print");
                    }

                *2.注解

                    @RequestMapping(value="/quick7")
                    @ResponseBody
                    public String save7() {
                        return "print";
                    }
                    *@ResponseBody告知spring该方法不进行试图跳转,直接响应数据

                3.返回json
                    @RequestMapping(value="/quick9")
                    @ResponseBody
                    public String save9() throws JsonProcessingException {
                        User user = new User();
                        user.setUsername("jack");
                        user.setAge(20);
                        //使用json转换工具将对象转换成json字符串
                        ObjectMapper objMapper = new ObjectMapper();
                        String json = objMapper.writeValueAsString(user);
                        return json;
                    }

                    maven
                        <dependency>
                          <groupId>com.fasterxml.jackson.core</groupId>
                          <artifactId>jackson-core</artifactId>
                          <version>2.9.8</version>
                        </dependency>
                        <dependency>
                          <groupId>com.fasterxml.jackson.core</groupId>
                          <artifactId>jackson-databind</artifactId>
                          <version>2.9.8</version>
                        </dependency>
                        <dependency>
                          <groupId>com.fasterxml.jackson.core</groupId>
                          <artifactId>jackson-annotations</artifactId>
                          <version>2.9.8</version>
                        </dependency>

        2.返回对象或集合
            1.xml配置
                1.在xml中配置
                    <!--配置处理器映射器--><!--将返回的对象转为json-->
                    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
                        <property name="messageConverters">
                            <list>
                                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>
                            </list>
                        </property>
                    </bean>
                2.直接返回bean自动封装为json
                    @RequestMapping(value="/quick10")
                    @ResponseBody
                    public User save10() throws IOException{
                        User user = new User();
                        user.setUsername("jack");
                        user.setAge(10);
                        return user;
                    }
            *2.注解配置
                1.在xml中配置
                     xmlns:mvc="http://www.springframework.org/schema/mvc"
                     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
                    <!--mvc注解驱动-->
                    <mvc:annotation-driven/>
                    *此配置可以代替以上繁琐配置,自动加载处理器映射器,处理器适配器
                    *同时默认底层就会集成jackson进行对象或集合的json格式字符串转换
                2.直接返回bean自动封装为json
                    @RequestMapping(value="/quick10")
                    @ResponseBody
                    public User save10() throws IOException{
                        User user = new User();
                        user.setUsername("jack");
                        user.setAge(10);
                        return user;
                    }










